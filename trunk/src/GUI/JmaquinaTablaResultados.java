/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JmaquinaTablaResultados.java
 *
 * Created on 03-ene-2012, 1:04:03
 */
package GUI;

import Dominio.ListaCategoria;
import Dominio.ListaEvento;
import Dominio.ListaParticipante;
import Repositorio.Apuesta;
import Repositorio.Categoria;
import Repositorio.Evento;
import Repositorio.Maquina;
import Repositorio.ParEve;
import Repositorio.Participante;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Eleany G
 */
public class JmaquinaTablaResultados extends javax.swing.JFrame {
private ListaParticipante comboBoxParticipante= new ListaParticipante();
private int parId;
private int peTopeApuesta;
private int eveId;
private int filaNombre=0;
private int contadorFila=0;
private int eveNroGan;
private Apuesta manejadorRepositorioApu= new Apuesta();
private Maquina manejadorRepositorioMaq = new Maquina();

    /** Creates new form JmaquinaTablaResultados */
    public JmaquinaTablaResultados() {
        initComponents();
    }

     public JmaquinaTablaResultados(int eveNroGanGlobal, int eveIdGlobal) {
        initComponents();
        comboBoxParticipante.participanteCB(jComboBoxParticipante);
        jLabelDescri.setVisible(false);
        jLabelTopA.setVisible(false);
        jLabelTipoP.setVisible(false);
        jTextField1TopA.setVisible(false);
        jTextFieldTipoP.setVisible(false);
        agregar.setVisible(false);
        jTableResult.setVisible(false);
        apostar.setVisible(false);
        eveId = eveIdGlobal;
        eveNroGan= eveNroGanGlobal;
        
    }
     
     
      /** Creates a new instance of PrincipalTabla */
   
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabelParticipantes = new javax.swing.JLabel();
        jComboBoxParticipante = new javax.swing.JComboBox();
        jLabelTopA = new javax.swing.JLabel();
        jLabelDescri = new javax.swing.JLabel();
        jTextField1TopA = new javax.swing.JTextField();
        jTextFieldTipoP = new javax.swing.JTextField();
        jLabelTipoP = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();
        agregar = new javax.swing.JButton();
        apostar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1090, 720));
        setResizable(false);

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(1090, 720));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(1090, 720));

        jLabelParticipantes.setFont(new java.awt.Font("Comic Sans MS", 1, 48));
        jLabelParticipantes.setForeground(new java.awt.Color(227, 224, 0));
        jLabelParticipantes.setText("Participantes");
        jLabelParticipantes.setBounds(100, 40, 320, 90);
        jLayeredPane1.add(jLabelParticipantes, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jComboBoxParticipante.setFont(new java.awt.Font("Comic Sans MS", 1, 24));
        jComboBoxParticipante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        jComboBoxParticipante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxParticipanteActionPerformed(evt);
            }
        });
        jComboBoxParticipante.setBounds(110, 140, 280, 60);
        jLayeredPane1.add(jComboBoxParticipante, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelTopA.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabelTopA.setForeground(new java.awt.Color(227, 224, 0));
        jLabelTopA.setText("Tope Apuesta");
        jLabelTopA.setBounds(590, 120, 170, 50);
        jLayeredPane1.add(jLabelTopA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelDescri.setFont(new java.awt.Font("Comic Sans MS", 1, 48));
        jLabelDescri.setForeground(new java.awt.Color(227, 224, 0));
        jLabelDescri.setText("Descripcion");
        jLabelDescri.setBounds(670, 30, 290, 70);
        jLayeredPane1.add(jLabelDescri, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextField1TopA.setEditable(false);
        jTextField1TopA.setFont(new java.awt.Font("Comic Sans MS", 1, 18));
        jTextField1TopA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(227, 224, 0), 3));
        jTextField1TopA.setBounds(780, 130, 210, 40);
        jLayeredPane1.add(jTextField1TopA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldTipoP.setEditable(false);
        jTextFieldTipoP.setFont(new java.awt.Font("Comic Sans MS", 1, 18));
        jTextFieldTipoP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(227, 224, 0), 3));
        jTextFieldTipoP.setBounds(780, 220, 210, 40);
        jLayeredPane1.add(jTextFieldTipoP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelTipoP.setFont(new java.awt.Font("Comic Sans MS", 1, 24));
        jLabelTipoP.setForeground(new java.awt.Color(227, 224, 0));
        jLabelTipoP.setText("Tipo de Pago");
        jLabelTipoP.setBounds(600, 220, 170, 40);
        jLayeredPane1.add(jLabelTipoP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTableResult.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Participante", "Monto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableResult.setGridColor(new java.awt.Color(204, 204, 0));
        jTableResult.setRowHeight(30);
        jScrollPane1.setViewportView(jTableResult);

        jScrollPane1.setBounds(100, 350, 710, 210);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        agregar.setFont(new java.awt.Font("Comic Sans MS", 1, 24));
        agregar.setForeground(new java.awt.Color(204, 0, 0));
        agregar.setText("Agregar");
        agregar.setBorderPainted(false);
        agregar.setContentAreaFilled(false);
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        agregar.setBounds(810, 290, 150, 40);
        jLayeredPane1.add(agregar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        apostar.setFont(new java.awt.Font("Comic Sans MS", 1, 48)); // NOI18N
        apostar.setForeground(new java.awt.Color(204, 0, 0));
        apostar.setText("Apostar");
        apostar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        apostar.setContentAreaFilled(false);
        apostar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostarActionPerformed(evt);
            }
        });
        apostar.setBounds(330, 580, 250, 90);
        jLayeredPane1.add(apostar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        cancelar.setFont(new java.awt.Font("Comic Sans MS", 1, 28)); // NOI18N
        cancelar.setForeground(new java.awt.Color(227, 224, 0));
        cancelar.setText("Cancelar");
        cancelar.setBorderPainted(false);
        cancelar.setContentAreaFilled(false);
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        cancelar.setBounds(900, 640, 150, 60);
        jLayeredPane1.add(cancelar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Gris.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1090, 720));
        jLabel1.setMinimumSize(new java.awt.Dimension(1090, 720));
        jLabel1.setPreferredSize(new java.awt.Dimension(1090, 720));
        jLabel1.setBounds(0, 0, 1100, 720);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jComboBoxParticipanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxParticipanteActionPerformed

jTextField1TopA.setVisible(true);
jTextFieldTipoP.setVisible(true);
jLabelTopA.setVisible(true);
jLabelTipoP.setVisible(true);
jLabelDescri.setVisible(true);
agregar.setVisible(true);



  int parN= jComboBoxParticipante.getSelectedIndex();  
  
  if(parN!=0){
    //Selecciono del combo el participante
    String parNombre = (String) jComboBoxParticipante.getSelectedItem();
    
 //guardo la posicion en el arreglo del participante segun la seleccion anterior
int parPosicion = ListaParticipante.buscarParticipanteNombre(parNombre);

//Guardo el id del participante seleccionado
int parIde= ListaParticipante.losParticipantes.get(parPosicion).getPartId();
parId= parIde;

//busco y guardo la informacion de ese participante en la tabla par_eve
int pePosicion = ListaParticipante.buscarPE(eveId, parIde);
peTopeApuesta = ListaParticipante.losParEve.get(pePosicion).getPeTopeApuesta();
int peTipoPago = ListaParticipante.losParEve.get(pePosicion).getPeTipoPago();
int evePosicion = ListaEvento.buscarEvento(eveId);
int eveTipoPago = ListaEvento.losEventos.get(evePosicion).getEveTipoPago();




//Imprimo la informacion en pantalla
String peTopApu = String.valueOf(peTopeApuesta);
String peTipoP = String.valueOf(peTipoPago);
String eveTipoP = String.valueOf(eveTipoPago);
jTextField1TopA.setText(peTopApu);

if (peTipoPago==0){
  jTextFieldTipoP.setText(eveTipoP);  
}
else{
jTextFieldTipoP.setText(peTipoP);
}
  }
    // TODO add your handling code here:
}//GEN-LAST:event_jComboBoxParticipanteActionPerformed

private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
     jTableResult.setVisible(true);
     apostar.setVisible(true);
     int i=0;
     boolean r = false;
     //Guardo lo que seleccione del combobox y parseo a string
        String parNombre = (String) jComboBoxParticipante.getSelectedItem();
        System.out.println(parNombre);
         int resta= eveNroGan-1;
      System.out.println("resta "+resta);
       System.out.println("contadorFila "+contadorFila);  
       
       while ((i<resta) && (r==false) && (contadorFila>0)){
       Object nombreValidar = jTableResult.getValueAt(i,0);  
       System.out.println(nombreValidar);
  
       if (nombreValidar.equals(parNombre)){
         JOptionPane.showMessageDialog(null, "Participante "+parNombre+" ya agregado. Por favor Seleccione otro participante");  
         r=true;
       }
       System.out.println("r "+r);
       i++;
       }
       
     //este if valida que solo se agregen la cantidad de ganadores correspondiente al evento seleccionado anteriormente 
     if ((contadorFila<eveNroGan) && (r==false)) {
        //Imprimo en la tabla el nombre del participante
        jTableResult.setValueAt(parNombre, filaNombre, 0);
        //ingremento pa fila para insertar el siguiente participante
        filaNombre= filaNombre+1;
        //incremento en contador de la cantidad de nro de ganadores ingresados
        contadorFila ++;
     } 
    
     
     else{
         if (contadorFila>=eveNroGan){
         JOptionPane.showMessageDialog(null, "No puede agregar mas,el nro de ganadores de este evento es de"+eveNroGan);
         }
     }
       
    // TODO add your handling code here:
}//GEN-LAST:event_agregarActionPerformed

private void apostarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostarActionPerformed
   
   //Inicializo j y p 
    int j=0;
    boolean p= false;
    //While que recorre la tabla y valida que no alla campos vacios y tenga el numero reqierido de participantes
    while (j<eveNroGan && p==false){
        //Selecciono el nombre y el monto en la posicion j de la tabla
       Object nombreValidar = jTableResult.getValueAt(j,0);
       String nombreValidarString = String.valueOf(nombreValidar);
       Object montoValidar= jTableResult.getValueAt(j, 1);
       
       //Valida que ingrese el numero de participantes necesarios
       if (nombreValidar == null){
             JOptionPane.showMessageDialog(null, "Debe ingresar "+eveNroGan+" particioantes");
         //cambia el valor p para que salga del while, al ocurrirse el error
         p= true; 
          }
       
       else {
           //Valida que se ingrese la apuesta a cada participante
          if (montoValidar == null){
         JOptionPane.showMessageDialog(null, "No puede apostar sin colocar monto al participante ");
         //cambia el valor p para que salga del while, al ocurrirse el error
         p= true;
       }
          else{
              //Transformo en string el monto escrito en la tabla
              String montoValidarString = String.valueOf(montoValidar);
              //busco la posicion de participante en el arreglo y guardo su id
              int posicionPar= ListaParticipante.buscarParticipanteNombre(nombreValidarString);
              int parIdeValidar = ListaParticipante.losParticipantes.get(posicionPar).getPartId();
              //busco la posicion de ese participante en el arrego lde pareve y guardo su tope apuesta
              int posicionParEve= ListaParticipante.buscarPE(eveId, parIdeValidar);
              int parTopApuestaValidar= ListaParticipante.losParEve.get(posicionParEve).getPeTopeApuesta();
             // transformo el monto de la tabla en float
              Float montoValidarFloat = Float.valueOf(montoValidarString);
              //Valido que si el participante tiene tope apuesta, no se haga una apuesta superior al mismo
              if ((parTopApuestaValidar>0) && (montoValidarFloat>parTopApuestaValidar)){
                JOptionPane.showMessageDialog(null, "No puede realizar una apuesta mayor al Tope de apuesta del participante "+nombreValidarString);  
                p=true;
              }
              
              else{
                  //si no hay errores, incremento j
                  j++;
              }
          }
       }
   
    }
   
    //este if valida que este todo correcto para poder insertar
    if ((j==(eveNroGan)) && (p==false)){
    int i=0;
    int idMaquina= manejadorRepositorioMaq.seleccionarIdMaq();
       //Inserto en la tabla apuesta,la nueva apuesta y guardo el id de la apuesta
       int apuId= manejadorRepositorioApu.insertarApuesta(eveId, idMaquina, 0);  
       
   //Este While recorre la tabla e inserta en la tabla apu_par    
    while (i<eveNroGan){
        System.out.println("i"+i);
    //Guardo el nombre del participante en la tabla    
    String nombre = String.valueOf(jTableResult.getValueAt(i,0));  
    //Busco la posicion del participante de la tabla en el arreglo
    int posicionPar= ListaParticipante.buscarParticipanteNombre(nombre);
    //Busco el id de ese participante en su posicion en el arreglo
    int parIdTabla= ListaParticipante.losParticipantes.get(posicionPar).getPartId();
    //Guardo el monto apostado en la tabla por cada participante
    String monto= String.valueOf(jTableResult.getValueAt(i, 1));
    //Transformo el monto de la tabla en float
    Float monto1 = Float.valueOf(monto);
    //Inserto en la tabla apu_par los participantes de la apuesta
    manejadorRepositorioApu.insertarApuPar(apuId, parIdTabla, monto1);
    //Incremento la variable i del while q recorre la tabla       
        i++;
    
       }
        //mensaje de exito de la apuesta
     JOptionPane.showMessageDialog(null, "Apuesta Realizada con exito"); 
     Categoria cat = new Categoria();
ParEve pe = new ParEve();
Participante par = new Participante();
Evento eve = new Evento();


//Limpio las listas
ListaEvento.losEventos.clear();
ListaCategoria.lasCategorias.clear();
ListaParticipante.losParticipantes.clear();
ListaParticipante.losParEve.clear();
System.out.println("limpie las listas");
        try {
            cat.finalizar();
            eve.finalizar();
            pe.finalizar();
            par.finalizar();
            manejadorRepositorioApu.finalizar();
            new Jmaquina().setVisible(true);
            this.dispose();
            
        } catch (Throwable ex) {
            Logger.getLogger(JmaquinaParticipantes.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  
    }
    else{
        if ((j<eveNroGan) && (p==false)){
         JOptionPane.showMessageDialog(null, "Debe Ingresar "+eveNroGan+" participantes"); 
        }
    }
    // TODO add your handling code here:
}//GEN-LAST:event_apostarActionPerformed

private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed

  //Cancelo la apuesta y regreso a la pantalla de inicio
    //muestro una pequenna pantalla para confirmar la seleccion
int respuesta= JOptionPane.showConfirmDialog(null,"Seguro que quiere abandonar esta apuesta?","Cancelar",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
    
if (respuesta==1){
    
}
else{
    
    Categoria cat = new Categoria();
ParEve pe = new ParEve();
Participante par = new Participante();
Evento eve = new Evento();


//Limpio las listas
ListaEvento.losEventos.clear();
ListaCategoria.lasCategorias.clear();
ListaParticipante.losParticipantes.clear();
ListaParticipante.losParEve.clear();
System.out.println("limpie las listas");
        try {
            cat.finalizar();
            eve.finalizar();
            pe.finalizar();
            par.finalizar();
            manejadorRepositorioApu.finalizar();
            new Jmaquina().setVisible(true);
            this.dispose();
            
        } catch (Throwable ex) {
            Logger.getLogger(JmaquinaParticipantes.class.getName()).log(Level.SEVERE, null, ex);
        }
          
    } 
    // TODO add your handling code here:
}//GEN-LAST:event_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JmaquinaTablaResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JmaquinaTablaResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JmaquinaTablaResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JmaquinaTablaResultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JmaquinaTablaResultados().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JButton apostar;
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox jComboBoxParticipante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDescri;
    private javax.swing.JLabel jLabelParticipantes;
    private javax.swing.JLabel jLabelTipoP;
    private javax.swing.JLabel jLabelTopA;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableResult;
    private javax.swing.JTextField jTextField1TopA;
    private javax.swing.JTextField jTextFieldTipoP;
    // End of variables declaration//GEN-END:variables
}
